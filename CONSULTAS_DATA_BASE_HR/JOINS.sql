/* TODOS SOBLRE JOINS*/
/* NATURAL JOINS */
/* ESTRUCTURA 
  SELECT table1.colums, table2.colums
  FROM table1
  NATURAL JOIN table2;
*/
/* A QUE REGION PERTENESE CANADA */
-- SOLO MUESTRA AMERICA PORQUE FILTRAMOS SOLO POR UN DATO
SELECT REGION_NAME
FROM REGIONS NATURAL JOIN COUNTRIES
WHERE COUNTRY_NAME='Canada'; 

/* como fuincona el natural join?
  AMBAS TABLAS TIENE QUE TENER UNA COLUMNA QUE 
  SE LLAME IGUAL Y QUE TENGA EL MISMO TIPO DE DATO 
*/
desc REGIONS;
desc COUNTRIES;
/*EN EL CASO ANTERIOR AMBAS TIENEN REGION_NAME CON EL MISMO TIPO DE DATO 
CON REGION_ID NO SE PUEDE PORQUE NO COMPARTE EL MISMO TIPO DE DATO
*/

/*  QUE PAISES PERTENESEN A UNA REGION*/
SELECT COUNTRY_NAME
FROM COUNTRIES NATURAL JOIN REGIONS
WHERE REGION_NAME = 'Americas';

/* A QUE REGION PERTENESE CANADA */

--con esta sintansis tenemos que dejar explisito con que columna 
-- tenemos que hacer la coinsidencia
-- con natural join NO ES NESESARIO LO HACE AUTOMATICO!
SELECT REGION_NAME
FROM REGIONS JOIN COUNTRIES
USING(REGION_ID)
WHERE COUNTRY_NAME ='Canada';

/*  QUE PAISES PERTENESEN A UNA REGION*/
--con ON nos va a indicar que columnas voy a comparar

SELECT COUNTRY_NAME
FROM COUNTRIES JOIN REGIONS
ON (COUNTRIES.REGION_ID= REGIONS.REGION_ID)
WHERE REGION_NAME ='Americas';

SELECT COUNT(*) FROM COUNTRIES; --25
SELECT COUNT(*) FROM REGIONS; --25

SELECT COUNT (*) FROM REGIONS CROSS JOIN COUNTRIES; 
-- todas la tablas y filas y no es nesesarios que halla relacion 
--HACE UNA MULTILPICACION juntandote todas las tablas 

/* seleccioname todas las locaciones y sus paises*/
SELECT *
FROM LOCATIONS 
NATURAL JOIN COUNTRIES;

/*SU EQUIVALENTE SIN JOIN */
SELECT *
FROM LOCATIONS , COUNTRIES
WHERE COUNTRIES.COUNTRY_ID=LOCATIONS.COUNTRY_ID;


/* OTRO EJEMPLO */
/* ES OTRA FORMA DE HACER UN ALIAS  CON L PARA LOCATION Y C PARA COUNTRIES*/
SELECT L.STREET_ADDRESS, L.CITY, C.COUNTRY_NAME
FROM LOCATIONS L, COUNTRIES C 
WHERE L.COUNTRY_ID=C.COUNTRY_ID;

/* QUE PASA CUANDO SE HACE UN JOIN NATURAL CUANDO NO SE TIENE UNA COLUMNA EN COMUN?*/

SELECT * 
FROM JOBS NATURAL JOIN COUNTRIES;
/* ESO ES UN PRODUCTO CARTECIANO CROSS JOIN */
/*SU CONSULTA SIMILAR */
SELECT * 
FROM JOBS,COUNTRIES;

--EXCERCISE
/*
THE JOB_HISTORY TABLE SHARE TRHEE IDENTICALLY NAME WITH THE 
EMPLOYYES TABLE : EMPLOYEES_ID, AND DEPARMENT_ID, JOB_ID,
DEPARMENT_ID, LAST_NAME, HIRE_DATE, AND END_DATE VALUES FOR ALL 
ROWS RESTRIEVED USING A PURE AS JH AND DOT USE NOTATION WHERE POSIBLE
*/
/*
 LA TABLA JOB_HISTORY TABLE COMPARTE 3  IDENTIFICADORE NAME WITH THE 
EMPLOYYES TABLE : EMPLOYEES_ID, AND DEPARMENT_ID, JOB_ID,
DEPARMENT_ID, LAST_NAME, HIRE_DATE, AND END_DATE


*/
/*CUANDO UTILIZAMOS NATURAL JOINS NO PODEMOS USAR EL ALIAS DE TABLAS EN LAS COLUMNAS EN COMUN 
ESO ES TAREA DE ORACLE
*/
SELECT EMPLOYEE_ID, JOB_ID, DEPARTMENT_ID,
      E.LAST_NAME, E.HIRE_DATE, JH.END_DATE /* ESTAS 3 COMO NO SON COMUNES SI PODEMOS USAR EL ALIAS*/
FROM JOB_HISTORY JH NATURAL JOIN EMPLOYEES E;


/*JOINS EN MULTIPLES TABLAS*/
-- TRES EJEMPLOS QUE DAN LOS MISMOS RESULTADOS 
--DEPARMENT, LOCATION , COUNTRIES, REGION 
SELECT D.DEPARTMENT_NAME,L.CITY,C.COUNTRY_NAME,R.REGION_NAME
FROM DEPARTMENTS D --LAS TRES TIENEN COLUNAS EN COMUN
NATURAL JOIN LOCATIONS L
NATURAL JOIN COUNTRIES C
NATURAL JOIN REGIONS R;

SELECT D.DEPARTMENT_NAME,L.CITY,C.COUNTRY_NAME,R.REGION_NAME
FROM DEPARTMENTS D --LAS TRES TIENEN COLUNAS EN COMUN
JOIN LOCATIONS L ON (D.LOCATION_ID=L.LOCATION_ID) -- EL ORDEN DE LAS EQUIVALENCIAS NO VARIAN 
JOIN COUNTRIES C ON (L.COUNTRY_ID= C.COUNTRY_ID)
JOIN REGIONS R ON (C.REGION_ID=R.REGION_ID);
-- JOIN ON ES LA UNICA QUE NOS LA POSIBILODAD DE HACER JOIN CUANDO NO TENEMOS LAS TABLAS CON DATOS EN COMUN

SELECT D.DEPARTMENT_NAME,L.CITY,C.COUNTRY_NAME,R.REGION_NAME
FROM DEPARTMENTS D --LAS TRES TIENEN COLUNAS EN COMUN
JOIN LOCATIONS L USING(LOCATION_ID)
JOIN COUNTRIES C USING (COUNTRY_ID)
JOIN REGIONS R USING (REGION_ID);
/* CUAND O USAR CADA UNA ? 
  DEPENDERA DE LA CONSULTA A REALIZAR Y LOS RESULTADOS QUE NESESITEMOS 
*/

SELECT D.DEPARTMENT_ID, L.CITY,D.DEPARTMENT_NAME
FROM DEPARTMENTS D 
JOIN LOCATIONS L ON L.LOCATION_ID =D.LOCATION_ID and -- EN ESTA CONSULTA APROBECHAMOS EL ON PARA HACER UNA CONDICION  O RESTRICCION
                   D.DEPARTMENT_NAME LIKE 'P%'; 

-- LO MISMO PERO CON WHERE 

SELECT D.DEPARTMENT_ID, L.CITY,D.DEPARTMENT_NAME
FROM DEPARTMENTS D 
JOIN LOCATIONS L ON L.LOCATION_ID =D.LOCATION_ID  
WHERE D.DEPARTMENT_NAME LIKE 'P%'; -- LO MISMO QUE ARRIBA PERO CON LA  CONDICION  O RESTRICCION UN WHERE
