--EJERCICIO 1
CREATE OR REPLACE FUNCTION YEAR (fechaentrada date) 
RETURN NUMBER 
IS 

  años NUMBER ;
BEGIN 
  años := to_char(fechaentrada,'yyyy');
  RETURN años;
END YEAR ;
/


SELECT (first_name || ' ' || last_name) nameemployee, year(hire_date) as year 
FROM EMPLOYEES
WHERE YEAR (HIRE_DATE)= '2007';

--EJERCICIO 2
create or replace function month(fechaentrada date)
return nvarchar2
is
  meses nvarchar2(20);
begin
  select to_char(fechaentrada,'month') into meses from dual;
  return meses;
end month;
/
declare
  mesprueba nvarchar2(20);
begin
  mesprueba := MONTH('30/08/1995');
  dbms_output.put_line('mes: ' || mesprueba);
end;

/
--EJERCICIO 3
create or replace function day(fechaentrada date)
return nvarchar2
is
  dias nvarchar2(20);
begin
  select to_char(fechaentrada,'day') into dias from dual;
  return dias;
end day;

/
declare
  diaprueba nvarchar2(20);
begin
  diaprueba := day('30/08/1995');
  dbms_output.put_line('dia: '|| diaprueba);
end;
/

--EJERCICIO 4
CREATE OR REPLACE FUNCTION FN_REGION (PLOC_ID NUMBER) RETURN VARCHAR2

IS
VREGION_NAME REGIONS.REGION_NAME%TYPE;
BEGIN

SELECT R.REGION_NAME INTO VREGION_NAME
FROM REGIONS  R INNER JOIN COUNTRIES C ON R.REGION_ID = C.REGION_ID
INNER JOIN LOCATIONS L ON C.COUNTRY_ID = L.COUNTRY_ID
WHERE L.LOCATION_ID = PLOC_ID;
RETURN VREGION_NAME;
END FN_REGION;
/
SELECT CITY, FN_REGION(LOCATION_ID) AS REGION_N
FROM LOCATIONS;
/
--EJERCICIO 5
CREATE OR REPLACE FUNCTION FN_CALCULAR_ANTIG (PEMP_ID INTEGER) RETURN INTEGER

IS
VCALCULAR_ANTIG NUMBER(8,2);

BEGIN
SELECT (SYSDATE - E.HIRE_DATE)/365 INTO VCALCULAR_ANTIG
FROM EMPLOYEES E
WHERE E.EMPLOYEE_ID = PEMP_ID;
RETURN VCALCULAR_ANTIG;
END FN_CALCULAR_ANTIG;
/
SELECT E.FIRST_NAME, E.LAST_NAME, E.HIRE_DATE, SYSDATE, FN_CALCULAR_ANTIG(EMPLOYEE_ID)
FROM EMPLOYEES E;
/
--EJERCICIO 6
CREATE OR REPLACE PROCEDURE PR_AUMENTO_SUELDO_DEPTO 
(PDEP_ID IN NUMBER, PAUMENTO IN NUMBER)
IS
CURSOR CEMPLOYEES
IS
SELECT *
FROM EMPLOYEES E
WHERE E.DEPARTMENT_ID = DEPARTMENT_ID;

REMPLOYEES EMPLOYEES%ROWTYPE;

BEGIN

IF PDEP_ID IS NULL THEN
DBMS_OUTPUT.PUT('ERROR – INGRESAR DEPARTMENT_ID');
END IF;
    
IF PAUMENTO IS NULL THEN
DBMS_OUTPUT.PUT('ERROR – INGRESAR AUMENTO DESEADO');
END IF;

IF NOT CEMPLOYEES%ISOPEN THEN
OPEN CEMPLOYEES;
END IF;

LOOP
FETCH CEMPLOYEES INTO REMPLOYEES;
EXIT WHEN CEMPLOYEES%NOTFOUND;
--AUMENTO := EMPLOYEES_REG.SALARY + ((EMPLOYEES_REG.SALARY*PERC)/100);
UPDATE EMPLOYEES E
SET SALARY = REMPLOYEES.SALARY*PAUMENTO
WHERE E.DEPARTMENT_ID  = PDEP_ID;
END LOOP;
COMMIT;

IF CEMPLOYEES%ISOPEN THEN
CLOSE CEMPLOYEES;
END IF;

DBMS_OUTPUT.PUT_LINE('OK');

END PR_AUMENTO_SUELDO_DEPTO;

BEGIN
PR_AUMENTO_SUELDO_DEPTO(210,1.2);
END;

SELECT * FROM EMPLOYEES;

--EJERCICIO 7
CREATE OR REPLACE VIEW VIEW_EMPLOYEES
AS 
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, E.FIRST_NAME, E.LAST_NAME,
J.JOB_TITLE, E.SALARY, E.HIRE_DATE, FN_CALCULAR_ANTIG(E.EMPLOYEE_ID) AS ANTIGUEDAD
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
INNER JOIN JOBS J ON E.JOB_ID = J.JOB_ID;

CREATE OR REPLACE PROCEDURE PR_DETALLE_EMPLEADOS_DEPTO (PDEP_ID IN NUMBER)
IS
CURSOR CEMPLOYEES

IS
SELECT *
FROM VIEW_EMPLOYEES
WHERE DEPARTMENT_ID = PDEP_ID;

REMPLOYEES VIEW_EMPLOYEES%ROWTYPE;

BEGIN
IF PDEP_ID IS NULL THEN
DBMS_OUTPUT.PUT('ERROR – VERIFICAR DEPARTAMENTO ID');
END IF;

IF NOT CEMPLOYEES%ISOPEN THEN
OPEN CEMPLOYEES;
END IF;

LOOP
FETCH CEMPLOYEES INTO REMPLOYEES;
EXIT WHEN CEMPLOYEES%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('----------------');
DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || REMPLOYEES.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('----------------');
DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || REMPLOYEES.FIRST_NAME || ' ' || REMPLOYEES.LAST_NAME);
DBMS_OUTPUT.PUT_LINE('FUNCION: ' || REMPLOYEES.JOB_TITLE);
DBMS_OUTPUT.PUT_LINE('SALARIO: ' || TO_CHAR(REMPLOYEES.SALARY));
IF REMPLOYEES.ANTIGUEDAD >= 10 AND REMPLOYEES.ANTIGUEDAD <11 THEN
DBMS_OUTPUT.PUT_LINE('** CUMPLE 10 AÑOS **');
END IF;
DBMS_OUTPUT.PUT_LINE('----------------');
END LOOP;

IF CEMPLOYEES%ISOPEN THEN
CLOSE CEMPLOYEES;
END IF;

END PR_DETALLE_EMPLEADOS_DEPTO;

BEGIN
PR_DETALLE_EMPLEADOS_DEPTO(210);
END;

--EJERCICIO 8
CREATE GLOBAL TEMPORARY TABLE CFG_AUMENTO_DEPARTAMENTO
ON COMMIT PRESERVE ROWS 
AS SELECT * FROM DEPARTMENTS;

CREATE OR REPLACE PROCEDURE PR_AUMENTOS (PDEP_ID IN NUMBER,PAUMENTO IN NUMBER)

IS
CURSOR CEMPLOYEES

IS
SELECT *
FROM CFG_AUMENTO_DEPARTAMENTO
WHERE DEPARTMENT_ID = PDEP_ID;

REMPLOYEES CFG_AUMENTO_DEPARTAMENTO%ROWTYPE;

BEGIN
  
IF PDEP_ID IS NULL THEN
DBMS_OUTPUT.PUT('ERROR – DEPARTMENT ID');
END IF;

IF NOT CEMPLOYEES%ISOPEN THEN
OPEN CEMPLOYEES;
END IF;

LOOP
FETCH CEMPLOYEES INTO REMPLOYEES;
EXIT WHEN CEMPLOYEES%NOTFOUND;
      
PR_AUMENTO_SUELDO_DEPTO(REMPLOYEES.DEPARTMENT_ID,PAUMENTO);

DBMS_OUTPUT.PUT_LINE('----------------');
DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || REMPLOYEES.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('----------------');
DBMS_OUTPUT.PUT_LINE('RESULTADO: OK');
END LOOP;
  
IF CEMPLOYEES%ISOPEN THEN
CLOSE CEMPLOYEES;
END IF;
  
END PR_AUMENTOS;

BEGIN
PR_AUMENTOS(210, 1.2);
END;

--EJERCICIO 9
ALTER TABLE EMPLOYEES ADD USUARIO VARCHAR2(30);
  
ALTER TABLE EMPLOYEES ADD FECHA_MODIFICACION DATE;
  
CREATE OR REPLACE TRIGGER LOG_EMPLOYEES
BEFORE INSERT OR UPDATE
OF FIRST_NAME, LAST_NAME, EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY, MANAGER_ID,DEPARTMENT_ID
ON EMPLOYEES
FOR EACH ROW

DECLARE VUSUARIO VARCHAR(30);

BEGIN
SELECT user INTO VUSUARIO FROM dual;
  :NEW.USUARIO := VUSUARIO;
  :NEW.FECHA_MODIFICACION := SYSDATE;
END;

UPDATE EMPLOYEES
SET SALARY = 43465
WHERE EMPLOYEE_ID = 100;
COMMIT;

SELECT * FROM EMPLOYEES;

--EJERCICIO 10
CREATE TABLE EMPLOYEES_AUDIT (EMPLOYEE_ID NUMBER(6), SALARY_OLD NUMBER(8,2), 
SALARY_NEW NUMBER(8,2), FECHA_MODIFICACION DATE);

CREATE OR REPLACE TRIGGER LOG_EMPLOYEES_AUDIT 
AFTER UPDATE
OF SALARY
ON EMPLOYEES
FOR EACH ROW

DECLARE VUSUARIO VARCHAR(30);

BEGIN
INSERT INTO EMPLOYEES_AUDIT 
(EMPLOYEE_ID,SALARY_OLD, SALARY_NEW, FECHA_MODIFICACION)VALUES 
( :OLD.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY, SYSDATE);
END;
/
SELECT * FROM DEPARTMENTS;
/
UPDATE EMPLOYEES
SET SALARY =30000
WHERE EMPLOYEE_ID = 100;
COMMIT;

SELECT * FROM EMPLOYEES_AUDIT;