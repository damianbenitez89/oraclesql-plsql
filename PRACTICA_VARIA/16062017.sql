create or REPLACE TRIGGER TG_REGIONS_1
BEFORE UPDATE 
ON REGIONS 
DECLARE 
VMSG VARCHAR2(100);
BEGIN 
VMSG := 'TRIGGER UPDATE REGIONS - NIVEL DE SENTENCIAS';
DBMS_OUTPUT.PUT_LINE(VMSG);
END TG_REGIONS_1;

/
UPDATE REGIONS 
SET REGION_NAME = UPPER(REGION_NAME)
WHERE REGION_ID IN (1,2);

ALTER TRIGGER TG_REGIONS_1 DISABLE;

/

DROP TRIGGER TG_REGIONS_2;

/
create or REPLACE TRIGGER TG_REGIONS_2
BEFORE UPDATE 
ON REGIONS 
FOR EACH

VMSG VARCHAR2(100);
BEGIN 
VMSG := 'TRIGGER UPDATE REGIONS - NIVEL DE SENTENCIAS';
DBMS_OUTPUT.PUT_LINE(VMSG);
END TG_REGIONS_2;
/

create or REPLACE TRIGGER TG_REGIONS_3
AFTER INSERT OR UPDATE OR DELETE 
ON REGIONS 

DECLARE 
VMSG VARCHAR2(100);

BEGIN 
VMSG := 'TRIGGER UPDATE REGIONS - NIVEL DE SENTENCIAS';
DBMS_OUTPUT.PUT_LINE(VMSG);

END TG_REGIONS_1;
/

SELECT * FROM employees;
/


CREATE OR REPLACE TRIGGER TG_REGIONS_5
BEFORE UPDATE 
ON REGIONS 
DECLARE REGION_1 NUMBER ;


BEGIN
IF : NEW.REGION _ID  IS NULL THEN 
SELECT MAX  FROM table
INSERT  
INTO REGIONS (REGIONS_ID,REGION_NAME)
OLD
VALUES NEW =(NULL,'REGIONS PRUEVA');

VMSG := 'TRIGGER UPDATE REGIONS - NIVEL DE SENTENCIAS';
DBMS_OUTPUT.PUT_LINE(VMSG);
END TG_REGIONS_5;